[General]
network = edvrp.simulations.EDVRPTestNetwork
sim-time-limit = 300s
seed-set = ${repetition}
num-rngs = 3
rng-class = "cMersenneTwister"

# Output configuration
output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec
eventlog-file = ${resultdir}/${configname}-${runnumber}.elog

# Recording configuration
**.scalar-recording = true
**.vector-recording = true

# Statistics collection
**.router*.convergenceTimeSignal.result-recording-modes = +histogram,+stats
**.router*.routingTableSizeSignal.result-recording-modes = +vector,+stats
**.router*.messageCountSignal.result-recording-modes = +count,+sum

# Debug configuration
debug-on-errors = true
print-undisposed = true

#
# EDVRP Basic Test Configuration
#
[Config EDVRPBasic]
description = "Basic EDVRP functionality test with 6 routers"
network = edvrp.simulations.EDVRPTestNetwork
sim-time-limit = 200s
repeat = 5

# Router parameters
**.router*.helloInterval = 5s
**.router*.holdTimeout = 15s
**.router*.routeTimeout = 30s
**.router*.updateInterval = 10s

# Display router information
**.router*.displayString = "i=abstract/router"

#
# Scalability Test Configuration
#
[Config EDVRPScalability]
description = "EDVRP scalability test with variable number of routers"
network = edvrp.simulations.EDVRPScalabilityNetwork
sim-time-limit = 500s
repeat = 3

# Test with different network sizes
**.numRouters = ${N=5,10,15,20}

# Adjust timers for larger networks
**.router*.helloInterval = 3s
**.router*.holdTimeout = 12s
**.router*.routeTimeout = 25s
**.router*.updateInterval = 8s

#
# Link Failure Test Configuration
#
[Config EDVRPLinkFailure]
description = "Test EDVRP behavior during link failures"
network = edvrp.simulations.EDVRPTestNetwork
sim-time-limit = 300s
repeat = 5

# Enable connection failure simulation
**.router*.helloInterval = 2s
**.router*.holdTimeout = 8s
**.router*.routeTimeout = 15s

# Record detailed statistics during failures
**.router*.convergenceTimeSignal.result-recording-modes = +vector,+histogram,+stats
**.scalar-recording = true
**.vector-recording = true

#
# Performance Comparison Configuration
#
[Config EDVRPComparison]
description = "Compare EDVRP with simulated RIP behavior"
network = edvrp.simulations.RIPComparisonNetwork
sim-time-limit = 600s  # Longer time to see RIP-like behavior
repeat = 5

# RIP-like timers (already set in network, but can override here if needed)
# The RIP simulation uses the same routers but with RIP-like parameters

# Detailed logging for analysis
cmdenv-express-mode = false
cmdenv-autoflush = true
**.router*.**.result-recording-modes = +vector,+histogram,+stats


[Config EDVRPComparisonEDVRP]
description = "EDVRP behavior on comparison topology"
network = edvrp.simulations.EDVRPTestNetwork  # Same topology, EDVRP settings
sim-time-limit = 200s  # Shorter because EDVRP converges faster
repeat = 5

# Fast EDVRP timers (use defaults from .ned file)
cmdenv-express-mode = false
cmdenv-autoflush = true
**.router*.**.result-recording-modes = +vector,+histogram,+stats

#
# Metric Testing Configuration
#
[Config EDVRPMetrics]
description = "Test EDVRP composite cost metric behavior"
network = edvrp.simulations.EDVRPTestNetwork
sim-time-limit = 250s
repeat = 5

# Test different alpha/beta combinations
**.router*.alpha = ${alpha=1000000, 500000, 2000000}
**.router*.beta = ${beta=1.0, 0.5, 2.0}

# Vary link characteristics
**.router1.linkBandwidth = 10Mbps
**.router1.linkLatency = 10ms
**.router2.linkBandwidth = 100Mbps  
**.router2.linkLatency = 1ms
**.router3.linkBandwidth = 1000Mbps
**.router3.linkLatency = 0.1ms

#
# Debug Configuration
#
[Config EDVRPDebug]
description = "Debug configuration with detailed logging"
network = edvrp.simulations.EDVRPTestNetwork
sim-time-limit = 100s
repeat = 1

# Enable detailed logging
cmdenv-express-mode = false
cmdenv-autoflush = true
debug-on-errors = true

# Log all events
**.router*.helloInterval = 10s
**.router*.holdTimeout = 30s
**.router*.routeTimeout = 60s

# Record everything for debugging
**.scalar-recording = true
**.vector-recording = true

#
# Stress Test Configuration
#
[Config EDVRPStress]
description = "Stress test with frequent topology changes"
network = edvrp.simulations.EDVRPScalabilityNetwork
sim-time-limit = 1000s
repeat = 3

**.numRouters = 15  # Fixed: use proper parameter assignment

# Aggressive timers
**.router*.helloInterval = 1s
**.router*.holdTimeout = 4s
**.router*.routeTimeout = 8s
**.router*.updateInterval = 2s